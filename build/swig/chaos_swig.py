# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_chaos_swig', [dirname(__file__)])
        except ImportError:
            import _chaos_swig
            return _chaos_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_chaos_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _chaos_swig = swig_import_helper()
    del swig_import_helper
else:
    import _chaos_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _chaos_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _chaos_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _chaos_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _chaos_swig.high_res_timer_epoch()
class chaotic_seq_source_f(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::chaotic_seq_source_f.

    To avoid accidental use of raw pointers, chaos::chaotic_seq_source_f's constructor is in a private implementation class. chaos::chaotic_seq_source_f::make is the public interface for creating new instances.

    Args:
        seed : 
        seq_len : 
        map_parameter : 
        tags : 
        repeat : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float seed, int seq_len, float map_parameter, tags_vector_t tags=std::vector< gr::tag_t >(), 
            bool repeat=False) -> chaotic_seq_source_f_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::chaotic_seq_source_f.

        To avoid accidental use of raw pointers, chaos::chaotic_seq_source_f's constructor is in a private implementation class. chaos::chaotic_seq_source_f::make is the public interface for creating new instances.

        Args:
            seed : 
            seq_len : 
            map_parameter : 
            tags : 
            repeat : 
        """
        return _chaos_swig.chaotic_seq_source_f_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_chaotic_seq_source_f
    __del__ = lambda self : None;
chaotic_seq_source_f_swigregister = _chaos_swig.chaotic_seq_source_f_swigregister
chaotic_seq_source_f_swigregister(chaotic_seq_source_f)

def chaotic_seq_source_f_make(*args, **kwargs):
  """
    chaotic_seq_source_f_make(float seed, int seq_len, float map_parameter, tags_vector_t tags=std::vector< gr::tag_t >(), 
        bool repeat=False) -> chaotic_seq_source_f_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::chaotic_seq_source_f.

    To avoid accidental use of raw pointers, chaos::chaotic_seq_source_f's constructor is in a private implementation class. chaos::chaotic_seq_source_f::make is the public interface for creating new instances.

    Args:
        seed : 
        seq_len : 
        map_parameter : 
        tags : 
        repeat : 
    """
  return _chaos_swig.chaotic_seq_source_f_make(*args, **kwargs)

class chaotic_seq_source_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::chaotic_seq_source_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::chaotic_seq_source_f)> self) -> chaotic_seq_source_f_sptr
        __init__(boost::shared_ptr<(gr::chaos::chaotic_seq_source_f)> self, chaotic_seq_source_f p) -> chaotic_seq_source_f_sptr
        """
        this = _chaos_swig.new_chaotic_seq_source_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(chaotic_seq_source_f_sptr self) -> chaotic_seq_source_f"""
        return _chaos_swig.chaotic_seq_source_f_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_chaotic_seq_source_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(chaotic_seq_source_f_sptr self, float seed, int seq_len, float map_parameter, tags_vector_t tags=std::vector< gr::tag_t >(), 
            bool repeat=False) -> chaotic_seq_source_f_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::chaotic_seq_source_f.

        To avoid accidental use of raw pointers, chaos::chaotic_seq_source_f's constructor is in a private implementation class. chaos::chaotic_seq_source_f::make is the public interface for creating new instances.

        Args:
            seed : 
            seq_len : 
            map_parameter : 
            tags : 
            repeat : 
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(chaotic_seq_source_f_sptr self) -> unsigned int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(chaotic_seq_source_f_sptr self, int which, int delay)
        declare_sample_delay(chaotic_seq_source_f_sptr self, unsigned int delay)
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(chaotic_seq_source_f_sptr self, int which) -> unsigned int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(chaotic_seq_source_f_sptr self) -> int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(chaotic_seq_source_f_sptr self) -> double"""
        return _chaos_swig.chaotic_seq_source_f_sptr_relative_rate(self)

    def start(self):
        """start(chaotic_seq_source_f_sptr self) -> bool"""
        return _chaos_swig.chaotic_seq_source_f_sptr_start(self)

    def stop(self):
        """stop(chaotic_seq_source_f_sptr self) -> bool"""
        return _chaos_swig.chaotic_seq_source_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(chaotic_seq_source_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.chaotic_seq_source_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(chaotic_seq_source_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.chaotic_seq_source_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(chaotic_seq_source_f_sptr self) -> int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(chaotic_seq_source_f_sptr self, int m)"""
        return _chaos_swig.chaotic_seq_source_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(chaotic_seq_source_f_sptr self)"""
        return _chaos_swig.chaotic_seq_source_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(chaotic_seq_source_f_sptr self) -> bool"""
        return _chaos_swig.chaotic_seq_source_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(chaotic_seq_source_f_sptr self, int m)"""
        return _chaos_swig.chaotic_seq_source_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(chaotic_seq_source_f_sptr self) -> int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(chaotic_seq_source_f_sptr self, int i) -> long"""
        return _chaos_swig.chaotic_seq_source_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(chaotic_seq_source_f_sptr self, long max_output_buffer)
        set_max_output_buffer(chaotic_seq_source_f_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(chaotic_seq_source_f_sptr self, int i) -> long"""
        return _chaos_swig.chaotic_seq_source_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(chaotic_seq_source_f_sptr self, long min_output_buffer)
        set_min_output_buffer(chaotic_seq_source_f_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(chaotic_seq_source_f_sptr self, int which) -> float
        pc_input_buffers_full(chaotic_seq_source_f_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(chaotic_seq_source_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(chaotic_seq_source_f_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(chaotic_seq_source_f_sptr self, int which) -> float
        pc_input_buffers_full_var(chaotic_seq_source_f_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(chaotic_seq_source_f_sptr self, int which) -> float
        pc_output_buffers_full(chaotic_seq_source_f_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(chaotic_seq_source_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(chaotic_seq_source_f_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(chaotic_seq_source_f_sptr self, int which) -> float
        pc_output_buffers_full_var(chaotic_seq_source_f_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(chaotic_seq_source_f_sptr self) -> float"""
        return _chaos_swig.chaotic_seq_source_f_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(chaotic_seq_source_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.chaotic_seq_source_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(chaotic_seq_source_f_sptr self)"""
        return _chaos_swig.chaotic_seq_source_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(chaotic_seq_source_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.chaotic_seq_source_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(chaotic_seq_source_f_sptr self) -> int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(chaotic_seq_source_f_sptr self) -> int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(chaotic_seq_source_f_sptr self, int priority) -> int"""
        return _chaos_swig.chaotic_seq_source_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(chaotic_seq_source_f_sptr self) -> std::string"""
        return _chaos_swig.chaotic_seq_source_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(chaotic_seq_source_f_sptr self) -> std::string"""
        return _chaos_swig.chaotic_seq_source_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(chaotic_seq_source_f_sptr self) -> io_signature_sptr"""
        return _chaos_swig.chaotic_seq_source_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(chaotic_seq_source_f_sptr self) -> io_signature_sptr"""
        return _chaos_swig.chaotic_seq_source_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(chaotic_seq_source_f_sptr self) -> long"""
        return _chaos_swig.chaotic_seq_source_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(chaotic_seq_source_f_sptr self) -> basic_block_sptr"""
        return _chaos_swig.chaotic_seq_source_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(chaotic_seq_source_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.chaotic_seq_source_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(chaotic_seq_source_f_sptr self) -> std::string"""
        return _chaos_swig.chaotic_seq_source_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(chaotic_seq_source_f_sptr self, std::string name)"""
        return _chaos_swig.chaotic_seq_source_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(chaotic_seq_source_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.chaotic_seq_source_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(chaotic_seq_source_f_sptr self) -> swig_int_ptr"""
        return _chaos_swig.chaotic_seq_source_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(chaotic_seq_source_f_sptr self) -> swig_int_ptr"""
        return _chaos_swig.chaotic_seq_source_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(chaotic_seq_source_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.chaotic_seq_source_f_sptr_message_subscribers(self, *args, **kwargs)

chaotic_seq_source_f_sptr_swigregister = _chaos_swig.chaotic_seq_source_f_sptr_swigregister
chaotic_seq_source_f_sptr_swigregister(chaotic_seq_source_f_sptr)

chaotic_seq_source_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
chaotic_seq_source_f = chaotic_seq_source_f.make;

class CPM_cf(object):
    """
    chaotic parameter modulation constellation table example: (-1+0j,1+0j) parameter table example: (3.98,3.6) this block erases all previous tags and generates new tags insteads

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM_cf.

    To avoid accidental use of raw pointers, chaos::CPM_cf's constructor is in a private implementation class. chaos::CPM_cf::make is the public interface for creating new instances.

    Args:
        seed : 
        seq_len : 
        constell_tab : 
        para_tab : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float seed, int seq_len, pmt_vector_cfloat constell_tab, pmt_vector_float para_tab) -> CPM_cf_sptr

        chaotic parameter modulation constellation table example: (-1+0j,1+0j) parameter table example: (3.98,3.6) this block erases all previous tags and generates new tags insteads

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM_cf.

        To avoid accidental use of raw pointers, chaos::CPM_cf's constructor is in a private implementation class. chaos::CPM_cf::make is the public interface for creating new instances.

        Args:
            seed : 
            seq_len : 
            constell_tab : 
            para_tab : 
        """
        return _chaos_swig.CPM_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_CPM_cf
    __del__ = lambda self : None;
CPM_cf_swigregister = _chaos_swig.CPM_cf_swigregister
CPM_cf_swigregister(CPM_cf)

def CPM_cf_make(*args, **kwargs):
  """
    CPM_cf_make(float seed, int seq_len, pmt_vector_cfloat constell_tab, pmt_vector_float para_tab) -> CPM_cf_sptr

    chaotic parameter modulation constellation table example: (-1+0j,1+0j) parameter table example: (3.98,3.6) this block erases all previous tags and generates new tags insteads

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM_cf.

    To avoid accidental use of raw pointers, chaos::CPM_cf's constructor is in a private implementation class. chaos::CPM_cf::make is the public interface for creating new instances.

    Args:
        seed : 
        seq_len : 
        constell_tab : 
        para_tab : 
    """
  return _chaos_swig.CPM_cf_make(*args, **kwargs)

class CPM_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::CPM_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::CPM_cf)> self) -> CPM_cf_sptr
        __init__(boost::shared_ptr<(gr::chaos::CPM_cf)> self, CPM_cf p) -> CPM_cf_sptr
        """
        this = _chaos_swig.new_CPM_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(CPM_cf_sptr self) -> CPM_cf"""
        return _chaos_swig.CPM_cf_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_CPM_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(CPM_cf_sptr self, float seed, int seq_len, pmt_vector_cfloat constell_tab, pmt_vector_float para_tab) -> CPM_cf_sptr

        chaotic parameter modulation constellation table example: (-1+0j,1+0j) parameter table example: (3.98,3.6) this block erases all previous tags and generates new tags insteads

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM_cf.

        To avoid accidental use of raw pointers, chaos::CPM_cf's constructor is in a private implementation class. chaos::CPM_cf::make is the public interface for creating new instances.

        Args:
            seed : 
            seq_len : 
            constell_tab : 
            para_tab : 
        """
        return _chaos_swig.CPM_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(CPM_cf_sptr self) -> unsigned int"""
        return _chaos_swig.CPM_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CPM_cf_sptr self, int which, int delay)
        declare_sample_delay(CPM_cf_sptr self, unsigned int delay)
        """
        return _chaos_swig.CPM_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(CPM_cf_sptr self, int which) -> unsigned int"""
        return _chaos_swig.CPM_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(CPM_cf_sptr self) -> int"""
        return _chaos_swig.CPM_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(CPM_cf_sptr self) -> double"""
        return _chaos_swig.CPM_cf_sptr_relative_rate(self)

    def start(self):
        """start(CPM_cf_sptr self) -> bool"""
        return _chaos_swig.CPM_cf_sptr_start(self)

    def stop(self):
        """stop(CPM_cf_sptr self) -> bool"""
        return _chaos_swig.CPM_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(CPM_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.CPM_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(CPM_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.CPM_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(CPM_cf_sptr self) -> int"""
        return _chaos_swig.CPM_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(CPM_cf_sptr self, int m)"""
        return _chaos_swig.CPM_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CPM_cf_sptr self)"""
        return _chaos_swig.CPM_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CPM_cf_sptr self) -> bool"""
        return _chaos_swig.CPM_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(CPM_cf_sptr self, int m)"""
        return _chaos_swig.CPM_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(CPM_cf_sptr self) -> int"""
        return _chaos_swig.CPM_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(CPM_cf_sptr self, int i) -> long"""
        return _chaos_swig.CPM_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CPM_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(CPM_cf_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.CPM_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(CPM_cf_sptr self, int i) -> long"""
        return _chaos_swig.CPM_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CPM_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(CPM_cf_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.CPM_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CPM_cf_sptr self, int which) -> float
        pc_input_buffers_full(CPM_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CPM_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(CPM_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CPM_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(CPM_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CPM_cf_sptr self, int which) -> float
        pc_output_buffers_full(CPM_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CPM_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(CPM_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CPM_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(CPM_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(CPM_cf_sptr self) -> float"""
        return _chaos_swig.CPM_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(CPM_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.CPM_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(CPM_cf_sptr self)"""
        return _chaos_swig.CPM_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(CPM_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.CPM_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(CPM_cf_sptr self) -> int"""
        return _chaos_swig.CPM_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(CPM_cf_sptr self) -> int"""
        return _chaos_swig.CPM_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(CPM_cf_sptr self, int priority) -> int"""
        return _chaos_swig.CPM_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(CPM_cf_sptr self) -> std::string"""
        return _chaos_swig.CPM_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(CPM_cf_sptr self) -> std::string"""
        return _chaos_swig.CPM_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(CPM_cf_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(CPM_cf_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(CPM_cf_sptr self) -> long"""
        return _chaos_swig.CPM_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(CPM_cf_sptr self) -> basic_block_sptr"""
        return _chaos_swig.CPM_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(CPM_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.CPM_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(CPM_cf_sptr self) -> std::string"""
        return _chaos_swig.CPM_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(CPM_cf_sptr self, std::string name)"""
        return _chaos_swig.CPM_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(CPM_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.CPM_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(CPM_cf_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(CPM_cf_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(CPM_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.CPM_cf_sptr_message_subscribers(self, *args, **kwargs)

CPM_cf_sptr_swigregister = _chaos_swig.CPM_cf_sptr_swigregister
CPM_cf_sptr_swigregister(CPM_cf_sptr)

CPM_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CPM_cf = CPM_cf.make;

class CPM_demod_fc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM_demod_fc.

    To avoid accidental use of raw pointers, chaos::CPM_demod_fc's constructor is in a private implementation class. chaos::CPM_demod_fc::make is the public interface for creating new instances.

    Args:
        seq_len : 
        constell_tab : 
        para_tab : 
        len_tag_key : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int seq_len, pmt_vector_cfloat constell_tab, pmt_vector_float para_tab, std::string len_tag_key) -> CPM_demod_fc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM_demod_fc.

        To avoid accidental use of raw pointers, chaos::CPM_demod_fc's constructor is in a private implementation class. chaos::CPM_demod_fc::make is the public interface for creating new instances.

        Args:
            seq_len : 
            constell_tab : 
            para_tab : 
            len_tag_key : 
        """
        return _chaos_swig.CPM_demod_fc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_CPM_demod_fc
    __del__ = lambda self : None;
CPM_demod_fc_swigregister = _chaos_swig.CPM_demod_fc_swigregister
CPM_demod_fc_swigregister(CPM_demod_fc)

def CPM_demod_fc_make(*args, **kwargs):
  """
    CPM_demod_fc_make(int seq_len, pmt_vector_cfloat constell_tab, pmt_vector_float para_tab, std::string len_tag_key) -> CPM_demod_fc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM_demod_fc.

    To avoid accidental use of raw pointers, chaos::CPM_demod_fc's constructor is in a private implementation class. chaos::CPM_demod_fc::make is the public interface for creating new instances.

    Args:
        seq_len : 
        constell_tab : 
        para_tab : 
        len_tag_key : 
    """
  return _chaos_swig.CPM_demod_fc_make(*args, **kwargs)

class CPM_demod_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::CPM_demod_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::CPM_demod_fc)> self) -> CPM_demod_fc_sptr
        __init__(boost::shared_ptr<(gr::chaos::CPM_demod_fc)> self, CPM_demod_fc p) -> CPM_demod_fc_sptr
        """
        this = _chaos_swig.new_CPM_demod_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(CPM_demod_fc_sptr self) -> CPM_demod_fc"""
        return _chaos_swig.CPM_demod_fc_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_CPM_demod_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(CPM_demod_fc_sptr self, int seq_len, pmt_vector_cfloat constell_tab, pmt_vector_float para_tab, std::string len_tag_key) -> CPM_demod_fc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM_demod_fc.

        To avoid accidental use of raw pointers, chaos::CPM_demod_fc's constructor is in a private implementation class. chaos::CPM_demod_fc::make is the public interface for creating new instances.

        Args:
            seq_len : 
            constell_tab : 
            para_tab : 
            len_tag_key : 
        """
        return _chaos_swig.CPM_demod_fc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(CPM_demod_fc_sptr self) -> unsigned int"""
        return _chaos_swig.CPM_demod_fc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CPM_demod_fc_sptr self, int which, int delay)
        declare_sample_delay(CPM_demod_fc_sptr self, unsigned int delay)
        """
        return _chaos_swig.CPM_demod_fc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(CPM_demod_fc_sptr self, int which) -> unsigned int"""
        return _chaos_swig.CPM_demod_fc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(CPM_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM_demod_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(CPM_demod_fc_sptr self) -> double"""
        return _chaos_swig.CPM_demod_fc_sptr_relative_rate(self)

    def start(self):
        """start(CPM_demod_fc_sptr self) -> bool"""
        return _chaos_swig.CPM_demod_fc_sptr_start(self)

    def stop(self):
        """stop(CPM_demod_fc_sptr self) -> bool"""
        return _chaos_swig.CPM_demod_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(CPM_demod_fc_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.CPM_demod_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(CPM_demod_fc_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.CPM_demod_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(CPM_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM_demod_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(CPM_demod_fc_sptr self, int m)"""
        return _chaos_swig.CPM_demod_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CPM_demod_fc_sptr self)"""
        return _chaos_swig.CPM_demod_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CPM_demod_fc_sptr self) -> bool"""
        return _chaos_swig.CPM_demod_fc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(CPM_demod_fc_sptr self, int m)"""
        return _chaos_swig.CPM_demod_fc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(CPM_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM_demod_fc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(CPM_demod_fc_sptr self, int i) -> long"""
        return _chaos_swig.CPM_demod_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CPM_demod_fc_sptr self, long max_output_buffer)
        set_max_output_buffer(CPM_demod_fc_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.CPM_demod_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(CPM_demod_fc_sptr self, int i) -> long"""
        return _chaos_swig.CPM_demod_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CPM_demod_fc_sptr self, long min_output_buffer)
        set_min_output_buffer(CPM_demod_fc_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.CPM_demod_fc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CPM_demod_fc_sptr self, int which) -> float
        pc_input_buffers_full(CPM_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_demod_fc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CPM_demod_fc_sptr self, int which) -> float
        pc_input_buffers_full_avg(CPM_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_demod_fc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CPM_demod_fc_sptr self, int which) -> float
        pc_input_buffers_full_var(CPM_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_demod_fc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CPM_demod_fc_sptr self, int which) -> float
        pc_output_buffers_full(CPM_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_demod_fc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CPM_demod_fc_sptr self, int which) -> float
        pc_output_buffers_full_avg(CPM_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_demod_fc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CPM_demod_fc_sptr self, int which) -> float
        pc_output_buffers_full_var(CPM_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM_demod_fc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(CPM_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM_demod_fc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(CPM_demod_fc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.CPM_demod_fc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(CPM_demod_fc_sptr self)"""
        return _chaos_swig.CPM_demod_fc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(CPM_demod_fc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.CPM_demod_fc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(CPM_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM_demod_fc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(CPM_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM_demod_fc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(CPM_demod_fc_sptr self, int priority) -> int"""
        return _chaos_swig.CPM_demod_fc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(CPM_demod_fc_sptr self) -> std::string"""
        return _chaos_swig.CPM_demod_fc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(CPM_demod_fc_sptr self) -> std::string"""
        return _chaos_swig.CPM_demod_fc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(CPM_demod_fc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM_demod_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(CPM_demod_fc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM_demod_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(CPM_demod_fc_sptr self) -> long"""
        return _chaos_swig.CPM_demod_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(CPM_demod_fc_sptr self) -> basic_block_sptr"""
        return _chaos_swig.CPM_demod_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(CPM_demod_fc_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.CPM_demod_fc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(CPM_demod_fc_sptr self) -> std::string"""
        return _chaos_swig.CPM_demod_fc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(CPM_demod_fc_sptr self, std::string name)"""
        return _chaos_swig.CPM_demod_fc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(CPM_demod_fc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.CPM_demod_fc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(CPM_demod_fc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM_demod_fc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(CPM_demod_fc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM_demod_fc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(CPM_demod_fc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.CPM_demod_fc_sptr_message_subscribers(self, *args, **kwargs)

CPM_demod_fc_sptr_swigregister = _chaos_swig.CPM_demod_fc_sptr_swigregister
CPM_demod_fc_sptr_swigregister(CPM_demod_fc_sptr)

CPM_demod_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CPM_demod_fc = CPM_demod_fc.make;

class CPM2_cf(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM2_cf.

    To avoid accidental use of raw pointers, chaos::CPM2_cf's constructor is in a private implementation class. chaos::CPM2_cf::make is the public interface for creating new instances.

    Args:
        seq_len : 
        constell_tab : 
        parameter : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int seq_len, pmt_vector_cfloat constell_tab, float parameter) -> CPM2_cf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM2_cf.

        To avoid accidental use of raw pointers, chaos::CPM2_cf's constructor is in a private implementation class. chaos::CPM2_cf::make is the public interface for creating new instances.

        Args:
            seq_len : 
            constell_tab : 
            parameter : 
        """
        return _chaos_swig.CPM2_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_CPM2_cf
    __del__ = lambda self : None;
CPM2_cf_swigregister = _chaos_swig.CPM2_cf_swigregister
CPM2_cf_swigregister(CPM2_cf)

def CPM2_cf_make(*args, **kwargs):
  """
    CPM2_cf_make(int seq_len, pmt_vector_cfloat constell_tab, float parameter) -> CPM2_cf_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM2_cf.

    To avoid accidental use of raw pointers, chaos::CPM2_cf's constructor is in a private implementation class. chaos::CPM2_cf::make is the public interface for creating new instances.

    Args:
        seq_len : 
        constell_tab : 
        parameter : 
    """
  return _chaos_swig.CPM2_cf_make(*args, **kwargs)

class CPM2_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::CPM2_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::CPM2_cf)> self) -> CPM2_cf_sptr
        __init__(boost::shared_ptr<(gr::chaos::CPM2_cf)> self, CPM2_cf p) -> CPM2_cf_sptr
        """
        this = _chaos_swig.new_CPM2_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(CPM2_cf_sptr self) -> CPM2_cf"""
        return _chaos_swig.CPM2_cf_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_CPM2_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(CPM2_cf_sptr self, int seq_len, pmt_vector_cfloat constell_tab, float parameter) -> CPM2_cf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM2_cf.

        To avoid accidental use of raw pointers, chaos::CPM2_cf's constructor is in a private implementation class. chaos::CPM2_cf::make is the public interface for creating new instances.

        Args:
            seq_len : 
            constell_tab : 
            parameter : 
        """
        return _chaos_swig.CPM2_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(CPM2_cf_sptr self) -> unsigned int"""
        return _chaos_swig.CPM2_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CPM2_cf_sptr self, int which, int delay)
        declare_sample_delay(CPM2_cf_sptr self, unsigned int delay)
        """
        return _chaos_swig.CPM2_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(CPM2_cf_sptr self, int which) -> unsigned int"""
        return _chaos_swig.CPM2_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(CPM2_cf_sptr self) -> int"""
        return _chaos_swig.CPM2_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(CPM2_cf_sptr self) -> double"""
        return _chaos_swig.CPM2_cf_sptr_relative_rate(self)

    def start(self):
        """start(CPM2_cf_sptr self) -> bool"""
        return _chaos_swig.CPM2_cf_sptr_start(self)

    def stop(self):
        """stop(CPM2_cf_sptr self) -> bool"""
        return _chaos_swig.CPM2_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(CPM2_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.CPM2_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(CPM2_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.CPM2_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(CPM2_cf_sptr self) -> int"""
        return _chaos_swig.CPM2_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(CPM2_cf_sptr self, int m)"""
        return _chaos_swig.CPM2_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CPM2_cf_sptr self)"""
        return _chaos_swig.CPM2_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CPM2_cf_sptr self) -> bool"""
        return _chaos_swig.CPM2_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(CPM2_cf_sptr self, int m)"""
        return _chaos_swig.CPM2_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(CPM2_cf_sptr self) -> int"""
        return _chaos_swig.CPM2_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(CPM2_cf_sptr self, int i) -> long"""
        return _chaos_swig.CPM2_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CPM2_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(CPM2_cf_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.CPM2_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(CPM2_cf_sptr self, int i) -> long"""
        return _chaos_swig.CPM2_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CPM2_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(CPM2_cf_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.CPM2_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CPM2_cf_sptr self, int which) -> float
        pc_input_buffers_full(CPM2_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CPM2_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(CPM2_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CPM2_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(CPM2_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CPM2_cf_sptr self, int which) -> float
        pc_output_buffers_full(CPM2_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CPM2_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(CPM2_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CPM2_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(CPM2_cf_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(CPM2_cf_sptr self) -> float"""
        return _chaos_swig.CPM2_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(CPM2_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.CPM2_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(CPM2_cf_sptr self)"""
        return _chaos_swig.CPM2_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(CPM2_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.CPM2_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(CPM2_cf_sptr self) -> int"""
        return _chaos_swig.CPM2_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(CPM2_cf_sptr self) -> int"""
        return _chaos_swig.CPM2_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(CPM2_cf_sptr self, int priority) -> int"""
        return _chaos_swig.CPM2_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(CPM2_cf_sptr self) -> std::string"""
        return _chaos_swig.CPM2_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(CPM2_cf_sptr self) -> std::string"""
        return _chaos_swig.CPM2_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(CPM2_cf_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM2_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(CPM2_cf_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM2_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(CPM2_cf_sptr self) -> long"""
        return _chaos_swig.CPM2_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(CPM2_cf_sptr self) -> basic_block_sptr"""
        return _chaos_swig.CPM2_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(CPM2_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.CPM2_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(CPM2_cf_sptr self) -> std::string"""
        return _chaos_swig.CPM2_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(CPM2_cf_sptr self, std::string name)"""
        return _chaos_swig.CPM2_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(CPM2_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.CPM2_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(CPM2_cf_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM2_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(CPM2_cf_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM2_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(CPM2_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.CPM2_cf_sptr_message_subscribers(self, *args, **kwargs)

CPM2_cf_sptr_swigregister = _chaos_swig.CPM2_cf_sptr_swigregister
CPM2_cf_sptr_swigregister(CPM2_cf_sptr)

CPM2_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CPM2_cf = CPM2_cf.make;

class DCSK_mod_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::DCSK_mod_cc.

    To avoid accidental use of raw pointers, chaos::DCSK_mod_cc's constructor is in a private implementation class. chaos::DCSK_mod_cc::make is the public interface for creating new instances.

    Args:
        seed : 
        seq_len : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float seed, int seq_len) -> DCSK_mod_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::DCSK_mod_cc.

        To avoid accidental use of raw pointers, chaos::DCSK_mod_cc's constructor is in a private implementation class. chaos::DCSK_mod_cc::make is the public interface for creating new instances.

        Args:
            seed : 
            seq_len : 
        """
        return _chaos_swig.DCSK_mod_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_DCSK_mod_cc
    __del__ = lambda self : None;
DCSK_mod_cc_swigregister = _chaos_swig.DCSK_mod_cc_swigregister
DCSK_mod_cc_swigregister(DCSK_mod_cc)

def DCSK_mod_cc_make(*args, **kwargs):
  """
    DCSK_mod_cc_make(float seed, int seq_len) -> DCSK_mod_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::DCSK_mod_cc.

    To avoid accidental use of raw pointers, chaos::DCSK_mod_cc's constructor is in a private implementation class. chaos::DCSK_mod_cc::make is the public interface for creating new instances.

    Args:
        seed : 
        seq_len : 
    """
  return _chaos_swig.DCSK_mod_cc_make(*args, **kwargs)

class DCSK_mod_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::DCSK_mod_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::DCSK_mod_cc)> self) -> DCSK_mod_cc_sptr
        __init__(boost::shared_ptr<(gr::chaos::DCSK_mod_cc)> self, DCSK_mod_cc p) -> DCSK_mod_cc_sptr
        """
        this = _chaos_swig.new_DCSK_mod_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(DCSK_mod_cc_sptr self) -> DCSK_mod_cc"""
        return _chaos_swig.DCSK_mod_cc_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_DCSK_mod_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(DCSK_mod_cc_sptr self, float seed, int seq_len) -> DCSK_mod_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::DCSK_mod_cc.

        To avoid accidental use of raw pointers, chaos::DCSK_mod_cc's constructor is in a private implementation class. chaos::DCSK_mod_cc::make is the public interface for creating new instances.

        Args:
            seed : 
            seq_len : 
        """
        return _chaos_swig.DCSK_mod_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(DCSK_mod_cc_sptr self) -> unsigned int"""
        return _chaos_swig.DCSK_mod_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(DCSK_mod_cc_sptr self, int which, int delay)
        declare_sample_delay(DCSK_mod_cc_sptr self, unsigned int delay)
        """
        return _chaos_swig.DCSK_mod_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(DCSK_mod_cc_sptr self, int which) -> unsigned int"""
        return _chaos_swig.DCSK_mod_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(DCSK_mod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_mod_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(DCSK_mod_cc_sptr self) -> double"""
        return _chaos_swig.DCSK_mod_cc_sptr_relative_rate(self)

    def start(self):
        """start(DCSK_mod_cc_sptr self) -> bool"""
        return _chaos_swig.DCSK_mod_cc_sptr_start(self)

    def stop(self):
        """stop(DCSK_mod_cc_sptr self) -> bool"""
        return _chaos_swig.DCSK_mod_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(DCSK_mod_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.DCSK_mod_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(DCSK_mod_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.DCSK_mod_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(DCSK_mod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_mod_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(DCSK_mod_cc_sptr self, int m)"""
        return _chaos_swig.DCSK_mod_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(DCSK_mod_cc_sptr self)"""
        return _chaos_swig.DCSK_mod_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(DCSK_mod_cc_sptr self) -> bool"""
        return _chaos_swig.DCSK_mod_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(DCSK_mod_cc_sptr self, int m)"""
        return _chaos_swig.DCSK_mod_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(DCSK_mod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_mod_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(DCSK_mod_cc_sptr self, int i) -> long"""
        return _chaos_swig.DCSK_mod_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(DCSK_mod_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(DCSK_mod_cc_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.DCSK_mod_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(DCSK_mod_cc_sptr self, int i) -> long"""
        return _chaos_swig.DCSK_mod_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(DCSK_mod_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(DCSK_mod_cc_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.DCSK_mod_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(DCSK_mod_cc_sptr self, int which) -> float
        pc_input_buffers_full(DCSK_mod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_mod_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(DCSK_mod_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(DCSK_mod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_mod_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(DCSK_mod_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(DCSK_mod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_mod_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(DCSK_mod_cc_sptr self, int which) -> float
        pc_output_buffers_full(DCSK_mod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_mod_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(DCSK_mod_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(DCSK_mod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_mod_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(DCSK_mod_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(DCSK_mod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_mod_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(DCSK_mod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_mod_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(DCSK_mod_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.DCSK_mod_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(DCSK_mod_cc_sptr self)"""
        return _chaos_swig.DCSK_mod_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(DCSK_mod_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.DCSK_mod_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(DCSK_mod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_mod_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(DCSK_mod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_mod_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(DCSK_mod_cc_sptr self, int priority) -> int"""
        return _chaos_swig.DCSK_mod_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(DCSK_mod_cc_sptr self) -> std::string"""
        return _chaos_swig.DCSK_mod_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(DCSK_mod_cc_sptr self) -> std::string"""
        return _chaos_swig.DCSK_mod_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(DCSK_mod_cc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.DCSK_mod_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(DCSK_mod_cc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.DCSK_mod_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(DCSK_mod_cc_sptr self) -> long"""
        return _chaos_swig.DCSK_mod_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(DCSK_mod_cc_sptr self) -> basic_block_sptr"""
        return _chaos_swig.DCSK_mod_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(DCSK_mod_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.DCSK_mod_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(DCSK_mod_cc_sptr self) -> std::string"""
        return _chaos_swig.DCSK_mod_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(DCSK_mod_cc_sptr self, std::string name)"""
        return _chaos_swig.DCSK_mod_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(DCSK_mod_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.DCSK_mod_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(DCSK_mod_cc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.DCSK_mod_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(DCSK_mod_cc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.DCSK_mod_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(DCSK_mod_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.DCSK_mod_cc_sptr_message_subscribers(self, *args, **kwargs)

DCSK_mod_cc_sptr_swigregister = _chaos_swig.DCSK_mod_cc_sptr_swigregister
DCSK_mod_cc_sptr_swigregister(DCSK_mod_cc_sptr)

DCSK_mod_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DCSK_mod_cc = DCSK_mod_cc.make;

class DCSK_demod_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::DCSK_demod_cc.

    To avoid accidental use of raw pointers, chaos::DCSK_demod_cc's constructor is in a private implementation class. chaos::DCSK_demod_cc::make is the public interface for creating new instances.

    Args:
        seq_len : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int seq_len) -> DCSK_demod_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::DCSK_demod_cc.

        To avoid accidental use of raw pointers, chaos::DCSK_demod_cc's constructor is in a private implementation class. chaos::DCSK_demod_cc::make is the public interface for creating new instances.

        Args:
            seq_len : 
        """
        return _chaos_swig.DCSK_demod_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_DCSK_demod_cc
    __del__ = lambda self : None;
DCSK_demod_cc_swigregister = _chaos_swig.DCSK_demod_cc_swigregister
DCSK_demod_cc_swigregister(DCSK_demod_cc)

def DCSK_demod_cc_make(*args, **kwargs):
  """
    DCSK_demod_cc_make(int seq_len) -> DCSK_demod_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::DCSK_demod_cc.

    To avoid accidental use of raw pointers, chaos::DCSK_demod_cc's constructor is in a private implementation class. chaos::DCSK_demod_cc::make is the public interface for creating new instances.

    Args:
        seq_len : 
    """
  return _chaos_swig.DCSK_demod_cc_make(*args, **kwargs)

class DCSK_demod_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::DCSK_demod_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::DCSK_demod_cc)> self) -> DCSK_demod_cc_sptr
        __init__(boost::shared_ptr<(gr::chaos::DCSK_demod_cc)> self, DCSK_demod_cc p) -> DCSK_demod_cc_sptr
        """
        this = _chaos_swig.new_DCSK_demod_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(DCSK_demod_cc_sptr self) -> DCSK_demod_cc"""
        return _chaos_swig.DCSK_demod_cc_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_DCSK_demod_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(DCSK_demod_cc_sptr self, int seq_len) -> DCSK_demod_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::DCSK_demod_cc.

        To avoid accidental use of raw pointers, chaos::DCSK_demod_cc's constructor is in a private implementation class. chaos::DCSK_demod_cc::make is the public interface for creating new instances.

        Args:
            seq_len : 
        """
        return _chaos_swig.DCSK_demod_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(DCSK_demod_cc_sptr self) -> unsigned int"""
        return _chaos_swig.DCSK_demod_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(DCSK_demod_cc_sptr self, int which, int delay)
        declare_sample_delay(DCSK_demod_cc_sptr self, unsigned int delay)
        """
        return _chaos_swig.DCSK_demod_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(DCSK_demod_cc_sptr self, int which) -> unsigned int"""
        return _chaos_swig.DCSK_demod_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(DCSK_demod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_demod_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(DCSK_demod_cc_sptr self) -> double"""
        return _chaos_swig.DCSK_demod_cc_sptr_relative_rate(self)

    def start(self):
        """start(DCSK_demod_cc_sptr self) -> bool"""
        return _chaos_swig.DCSK_demod_cc_sptr_start(self)

    def stop(self):
        """stop(DCSK_demod_cc_sptr self) -> bool"""
        return _chaos_swig.DCSK_demod_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(DCSK_demod_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.DCSK_demod_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(DCSK_demod_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.DCSK_demod_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(DCSK_demod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_demod_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(DCSK_demod_cc_sptr self, int m)"""
        return _chaos_swig.DCSK_demod_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(DCSK_demod_cc_sptr self)"""
        return _chaos_swig.DCSK_demod_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(DCSK_demod_cc_sptr self) -> bool"""
        return _chaos_swig.DCSK_demod_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(DCSK_demod_cc_sptr self, int m)"""
        return _chaos_swig.DCSK_demod_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(DCSK_demod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_demod_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(DCSK_demod_cc_sptr self, int i) -> long"""
        return _chaos_swig.DCSK_demod_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(DCSK_demod_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(DCSK_demod_cc_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.DCSK_demod_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(DCSK_demod_cc_sptr self, int i) -> long"""
        return _chaos_swig.DCSK_demod_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(DCSK_demod_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(DCSK_demod_cc_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.DCSK_demod_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(DCSK_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full(DCSK_demod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_demod_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(DCSK_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(DCSK_demod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_demod_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(DCSK_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(DCSK_demod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_demod_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(DCSK_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full(DCSK_demod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_demod_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(DCSK_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(DCSK_demod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_demod_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(DCSK_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(DCSK_demod_cc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.DCSK_demod_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(DCSK_demod_cc_sptr self) -> float"""
        return _chaos_swig.DCSK_demod_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(DCSK_demod_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.DCSK_demod_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(DCSK_demod_cc_sptr self)"""
        return _chaos_swig.DCSK_demod_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(DCSK_demod_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.DCSK_demod_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(DCSK_demod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_demod_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(DCSK_demod_cc_sptr self) -> int"""
        return _chaos_swig.DCSK_demod_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(DCSK_demod_cc_sptr self, int priority) -> int"""
        return _chaos_swig.DCSK_demod_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(DCSK_demod_cc_sptr self) -> std::string"""
        return _chaos_swig.DCSK_demod_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(DCSK_demod_cc_sptr self) -> std::string"""
        return _chaos_swig.DCSK_demod_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(DCSK_demod_cc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.DCSK_demod_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(DCSK_demod_cc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.DCSK_demod_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(DCSK_demod_cc_sptr self) -> long"""
        return _chaos_swig.DCSK_demod_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(DCSK_demod_cc_sptr self) -> basic_block_sptr"""
        return _chaos_swig.DCSK_demod_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(DCSK_demod_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.DCSK_demod_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(DCSK_demod_cc_sptr self) -> std::string"""
        return _chaos_swig.DCSK_demod_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(DCSK_demod_cc_sptr self, std::string name)"""
        return _chaos_swig.DCSK_demod_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(DCSK_demod_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.DCSK_demod_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(DCSK_demod_cc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.DCSK_demod_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(DCSK_demod_cc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.DCSK_demod_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(DCSK_demod_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.DCSK_demod_cc_sptr_message_subscribers(self, *args, **kwargs)

DCSK_demod_cc_sptr_swigregister = _chaos_swig.DCSK_demod_cc_sptr_swigregister
DCSK_demod_cc_sptr_swigregister(DCSK_demod_cc_sptr)

DCSK_demod_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
DCSK_demod_cc = DCSK_demod_cc.make;

class chaotic_prefix_bc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:



    Args:
        init : 
        parameter : 
        header_len : 
        len_tag_key : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Logistic_map(self, *args, **kwargs):
        """
        Logistic_map(chaotic_prefix_bc self, float init, float parameter, unsigned int seq_len) -> pmt_vector_float

        Return a shared_ptr to a new instance of chaos::chaotic_prefix_bc.

        To avoid accidental use of raw pointers, chaos::chaotic_prefix_bc's constructor is in a private implementation class. chaos::chaotic_prefix_bc::make is the public interface for creating new instances.
        """
        return _chaos_swig.chaotic_prefix_bc_Logistic_map(self, *args, **kwargs)

    def make(*args, **kwargs):
        """
        make(float init, float parameter, unsigned int header_len, std::string const & len_tag_key) -> chaotic_prefix_bc_sptr

        <+description of block+>

        Constructor Specific Documentation:



        Args:
            init : 
            parameter : 
            header_len : 
            len_tag_key : 
        """
        return _chaos_swig.chaotic_prefix_bc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_chaotic_prefix_bc
    __del__ = lambda self : None;
chaotic_prefix_bc_swigregister = _chaos_swig.chaotic_prefix_bc_swigregister
chaotic_prefix_bc_swigregister(chaotic_prefix_bc)

def chaotic_prefix_bc_make(*args, **kwargs):
  """
    chaotic_prefix_bc_make(float init, float parameter, unsigned int header_len, std::string const & len_tag_key) -> chaotic_prefix_bc_sptr

    <+description of block+>

    Constructor Specific Documentation:



    Args:
        init : 
        parameter : 
        header_len : 
        len_tag_key : 
    """
  return _chaos_swig.chaotic_prefix_bc_make(*args, **kwargs)

class chaotic_prefix_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::chaotic_prefix_bc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::chaotic_prefix_bc)> self) -> chaotic_prefix_bc_sptr
        __init__(boost::shared_ptr<(gr::chaos::chaotic_prefix_bc)> self, chaotic_prefix_bc p) -> chaotic_prefix_bc_sptr
        """
        this = _chaos_swig.new_chaotic_prefix_bc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(chaotic_prefix_bc_sptr self) -> chaotic_prefix_bc"""
        return _chaos_swig.chaotic_prefix_bc_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_chaotic_prefix_bc_sptr
    __del__ = lambda self : None;
    def Logistic_map(self, *args, **kwargs):
        """
        Logistic_map(chaotic_prefix_bc_sptr self, float init, float parameter, unsigned int seq_len) -> pmt_vector_float

        Return a shared_ptr to a new instance of chaos::chaotic_prefix_bc.

        To avoid accidental use of raw pointers, chaos::chaotic_prefix_bc's constructor is in a private implementation class. chaos::chaotic_prefix_bc::make is the public interface for creating new instances.
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_Logistic_map(self, *args, **kwargs)

    def make(self, *args, **kwargs):
        """
        make(chaotic_prefix_bc_sptr self, float init, float parameter, unsigned int header_len, std::string const & len_tag_key) -> chaotic_prefix_bc_sptr

        <+description of block+>

        Constructor Specific Documentation:



        Args:
            init : 
            parameter : 
            header_len : 
            len_tag_key : 
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(chaotic_prefix_bc_sptr self) -> unsigned int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(chaotic_prefix_bc_sptr self, int which, int delay)
        declare_sample_delay(chaotic_prefix_bc_sptr self, unsigned int delay)
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(chaotic_prefix_bc_sptr self, int which) -> unsigned int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(chaotic_prefix_bc_sptr self) -> int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(chaotic_prefix_bc_sptr self) -> double"""
        return _chaos_swig.chaotic_prefix_bc_sptr_relative_rate(self)

    def start(self):
        """start(chaotic_prefix_bc_sptr self) -> bool"""
        return _chaos_swig.chaotic_prefix_bc_sptr_start(self)

    def stop(self):
        """stop(chaotic_prefix_bc_sptr self) -> bool"""
        return _chaos_swig.chaotic_prefix_bc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(chaotic_prefix_bc_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.chaotic_prefix_bc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(chaotic_prefix_bc_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.chaotic_prefix_bc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(chaotic_prefix_bc_sptr self) -> int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(chaotic_prefix_bc_sptr self, int m)"""
        return _chaos_swig.chaotic_prefix_bc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(chaotic_prefix_bc_sptr self)"""
        return _chaos_swig.chaotic_prefix_bc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(chaotic_prefix_bc_sptr self) -> bool"""
        return _chaos_swig.chaotic_prefix_bc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(chaotic_prefix_bc_sptr self, int m)"""
        return _chaos_swig.chaotic_prefix_bc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(chaotic_prefix_bc_sptr self) -> int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(chaotic_prefix_bc_sptr self, int i) -> long"""
        return _chaos_swig.chaotic_prefix_bc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(chaotic_prefix_bc_sptr self, long max_output_buffer)
        set_max_output_buffer(chaotic_prefix_bc_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(chaotic_prefix_bc_sptr self, int i) -> long"""
        return _chaos_swig.chaotic_prefix_bc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(chaotic_prefix_bc_sptr self, long min_output_buffer)
        set_min_output_buffer(chaotic_prefix_bc_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(chaotic_prefix_bc_sptr self, int which) -> float
        pc_input_buffers_full(chaotic_prefix_bc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(chaotic_prefix_bc_sptr self, int which) -> float
        pc_input_buffers_full_avg(chaotic_prefix_bc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(chaotic_prefix_bc_sptr self, int which) -> float
        pc_input_buffers_full_var(chaotic_prefix_bc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(chaotic_prefix_bc_sptr self, int which) -> float
        pc_output_buffers_full(chaotic_prefix_bc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(chaotic_prefix_bc_sptr self, int which) -> float
        pc_output_buffers_full_avg(chaotic_prefix_bc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(chaotic_prefix_bc_sptr self, int which) -> float
        pc_output_buffers_full_var(chaotic_prefix_bc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(chaotic_prefix_bc_sptr self) -> float"""
        return _chaos_swig.chaotic_prefix_bc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(chaotic_prefix_bc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.chaotic_prefix_bc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(chaotic_prefix_bc_sptr self)"""
        return _chaos_swig.chaotic_prefix_bc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(chaotic_prefix_bc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.chaotic_prefix_bc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(chaotic_prefix_bc_sptr self) -> int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(chaotic_prefix_bc_sptr self) -> int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(chaotic_prefix_bc_sptr self, int priority) -> int"""
        return _chaos_swig.chaotic_prefix_bc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(chaotic_prefix_bc_sptr self) -> std::string"""
        return _chaos_swig.chaotic_prefix_bc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(chaotic_prefix_bc_sptr self) -> std::string"""
        return _chaos_swig.chaotic_prefix_bc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(chaotic_prefix_bc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.chaotic_prefix_bc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(chaotic_prefix_bc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.chaotic_prefix_bc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(chaotic_prefix_bc_sptr self) -> long"""
        return _chaos_swig.chaotic_prefix_bc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(chaotic_prefix_bc_sptr self) -> basic_block_sptr"""
        return _chaos_swig.chaotic_prefix_bc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(chaotic_prefix_bc_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.chaotic_prefix_bc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(chaotic_prefix_bc_sptr self) -> std::string"""
        return _chaos_swig.chaotic_prefix_bc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(chaotic_prefix_bc_sptr self, std::string name)"""
        return _chaos_swig.chaotic_prefix_bc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(chaotic_prefix_bc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.chaotic_prefix_bc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(chaotic_prefix_bc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.chaotic_prefix_bc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(chaotic_prefix_bc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.chaotic_prefix_bc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(chaotic_prefix_bc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.chaotic_prefix_bc_sptr_message_subscribers(self, *args, **kwargs)

chaotic_prefix_bc_sptr_swigregister = _chaos_swig.chaotic_prefix_bc_sptr_swigregister
chaotic_prefix_bc_sptr_swigregister(chaotic_prefix_bc_sptr)

chaotic_prefix_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
chaotic_prefix_bc = chaotic_prefix_bc.make;

class CPM2_demod_fc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM2_demod_fc.

    To avoid accidental use of raw pointers, chaos::CPM2_demod_fc's constructor is in a private implementation class. chaos::CPM2_demod_fc::make is the public interface for creating new instances.

    Args:
        spreading_gain : 
        len_tag_key : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int spreading_gain, std::string const & len_tag_key) -> CPM2_demod_fc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM2_demod_fc.

        To avoid accidental use of raw pointers, chaos::CPM2_demod_fc's constructor is in a private implementation class. chaos::CPM2_demod_fc::make is the public interface for creating new instances.

        Args:
            spreading_gain : 
            len_tag_key : 
        """
        return _chaos_swig.CPM2_demod_fc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _chaos_swig.delete_CPM2_demod_fc
    __del__ = lambda self : None;
CPM2_demod_fc_swigregister = _chaos_swig.CPM2_demod_fc_swigregister
CPM2_demod_fc_swigregister(CPM2_demod_fc)

def CPM2_demod_fc_make(*args, **kwargs):
  """
    CPM2_demod_fc_make(int spreading_gain, std::string const & len_tag_key) -> CPM2_demod_fc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of chaos::CPM2_demod_fc.

    To avoid accidental use of raw pointers, chaos::CPM2_demod_fc's constructor is in a private implementation class. chaos::CPM2_demod_fc::make is the public interface for creating new instances.

    Args:
        spreading_gain : 
        len_tag_key : 
    """
  return _chaos_swig.CPM2_demod_fc_make(*args, **kwargs)

class CPM2_demod_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::chaos::CPM2_demod_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::chaos::CPM2_demod_fc)> self) -> CPM2_demod_fc_sptr
        __init__(boost::shared_ptr<(gr::chaos::CPM2_demod_fc)> self, CPM2_demod_fc p) -> CPM2_demod_fc_sptr
        """
        this = _chaos_swig.new_CPM2_demod_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(CPM2_demod_fc_sptr self) -> CPM2_demod_fc"""
        return _chaos_swig.CPM2_demod_fc_sptr___deref__(self)

    __swig_destroy__ = _chaos_swig.delete_CPM2_demod_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(CPM2_demod_fc_sptr self, int spreading_gain, std::string const & len_tag_key) -> CPM2_demod_fc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of chaos::CPM2_demod_fc.

        To avoid accidental use of raw pointers, chaos::CPM2_demod_fc's constructor is in a private implementation class. chaos::CPM2_demod_fc::make is the public interface for creating new instances.

        Args:
            spreading_gain : 
            len_tag_key : 
        """
        return _chaos_swig.CPM2_demod_fc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(CPM2_demod_fc_sptr self) -> unsigned int"""
        return _chaos_swig.CPM2_demod_fc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CPM2_demod_fc_sptr self, int which, int delay)
        declare_sample_delay(CPM2_demod_fc_sptr self, unsigned int delay)
        """
        return _chaos_swig.CPM2_demod_fc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(CPM2_demod_fc_sptr self, int which) -> unsigned int"""
        return _chaos_swig.CPM2_demod_fc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(CPM2_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM2_demod_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(CPM2_demod_fc_sptr self) -> double"""
        return _chaos_swig.CPM2_demod_fc_sptr_relative_rate(self)

    def start(self):
        """start(CPM2_demod_fc_sptr self) -> bool"""
        return _chaos_swig.CPM2_demod_fc_sptr_start(self)

    def stop(self):
        """stop(CPM2_demod_fc_sptr self) -> bool"""
        return _chaos_swig.CPM2_demod_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(CPM2_demod_fc_sptr self, unsigned int which_input) -> uint64_t"""
        return _chaos_swig.CPM2_demod_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(CPM2_demod_fc_sptr self, unsigned int which_output) -> uint64_t"""
        return _chaos_swig.CPM2_demod_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(CPM2_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM2_demod_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(CPM2_demod_fc_sptr self, int m)"""
        return _chaos_swig.CPM2_demod_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CPM2_demod_fc_sptr self)"""
        return _chaos_swig.CPM2_demod_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CPM2_demod_fc_sptr self) -> bool"""
        return _chaos_swig.CPM2_demod_fc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(CPM2_demod_fc_sptr self, int m)"""
        return _chaos_swig.CPM2_demod_fc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(CPM2_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM2_demod_fc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(CPM2_demod_fc_sptr self, int i) -> long"""
        return _chaos_swig.CPM2_demod_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CPM2_demod_fc_sptr self, long max_output_buffer)
        set_max_output_buffer(CPM2_demod_fc_sptr self, int port, long max_output_buffer)
        """
        return _chaos_swig.CPM2_demod_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(CPM2_demod_fc_sptr self, int i) -> long"""
        return _chaos_swig.CPM2_demod_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CPM2_demod_fc_sptr self, long min_output_buffer)
        set_min_output_buffer(CPM2_demod_fc_sptr self, int port, long min_output_buffer)
        """
        return _chaos_swig.CPM2_demod_fc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CPM2_demod_fc_sptr self, int which) -> float
        pc_input_buffers_full(CPM2_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_demod_fc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CPM2_demod_fc_sptr self, int which) -> float
        pc_input_buffers_full_avg(CPM2_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_demod_fc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CPM2_demod_fc_sptr self, int which) -> float
        pc_input_buffers_full_var(CPM2_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_demod_fc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CPM2_demod_fc_sptr self, int which) -> float
        pc_output_buffers_full(CPM2_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_demod_fc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CPM2_demod_fc_sptr self, int which) -> float
        pc_output_buffers_full_avg(CPM2_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_demod_fc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CPM2_demod_fc_sptr self, int which) -> float
        pc_output_buffers_full_var(CPM2_demod_fc_sptr self) -> pmt_vector_float
        """
        return _chaos_swig.CPM2_demod_fc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(CPM2_demod_fc_sptr self) -> float"""
        return _chaos_swig.CPM2_demod_fc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(CPM2_demod_fc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _chaos_swig.CPM2_demod_fc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(CPM2_demod_fc_sptr self)"""
        return _chaos_swig.CPM2_demod_fc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(CPM2_demod_fc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _chaos_swig.CPM2_demod_fc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(CPM2_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM2_demod_fc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(CPM2_demod_fc_sptr self) -> int"""
        return _chaos_swig.CPM2_demod_fc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(CPM2_demod_fc_sptr self, int priority) -> int"""
        return _chaos_swig.CPM2_demod_fc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(CPM2_demod_fc_sptr self) -> std::string"""
        return _chaos_swig.CPM2_demod_fc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(CPM2_demod_fc_sptr self) -> std::string"""
        return _chaos_swig.CPM2_demod_fc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(CPM2_demod_fc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM2_demod_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(CPM2_demod_fc_sptr self) -> io_signature_sptr"""
        return _chaos_swig.CPM2_demod_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(CPM2_demod_fc_sptr self) -> long"""
        return _chaos_swig.CPM2_demod_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(CPM2_demod_fc_sptr self) -> basic_block_sptr"""
        return _chaos_swig.CPM2_demod_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(CPM2_demod_fc_sptr self, int ninputs, int noutputs) -> bool"""
        return _chaos_swig.CPM2_demod_fc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(CPM2_demod_fc_sptr self) -> std::string"""
        return _chaos_swig.CPM2_demod_fc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(CPM2_demod_fc_sptr self, std::string name)"""
        return _chaos_swig.CPM2_demod_fc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(CPM2_demod_fc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _chaos_swig.CPM2_demod_fc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(CPM2_demod_fc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM2_demod_fc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(CPM2_demod_fc_sptr self) -> swig_int_ptr"""
        return _chaos_swig.CPM2_demod_fc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(CPM2_demod_fc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _chaos_swig.CPM2_demod_fc_sptr_message_subscribers(self, *args, **kwargs)

CPM2_demod_fc_sptr_swigregister = _chaos_swig.CPM2_demod_fc_sptr_swigregister
CPM2_demod_fc_sptr_swigregister(CPM2_demod_fc_sptr)

CPM2_demod_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CPM2_demod_fc = CPM2_demod_fc.make;



